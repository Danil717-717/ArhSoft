/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.46).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Robot;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-08-12T11:28:20.035575131Z[GMT]")
@Validated
public interface RobotApi {

    @Operation(summary = "Добавить робота", description = "Добавить робота БД", tags={ "Robot" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Robot.class))),
        
        @ApiResponse(responseCode = "405", description = "Invalid input") })
    @RequestMapping(value = "/Robot",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }, 
        method = RequestMethod.POST)
    ResponseEntity<Robot> addRobot(@Parameter(in = ParameterIn.DEFAULT, description = "Создание нового робота в БД", required=true, schema=@Schema()) @Valid @RequestBody Robot body);


    @Operation(summary = "Удаляет робота", description = "Удаляет робота", tags={ "Robot" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "400", description = "Invalid Robot value") })
    @RequestMapping(value = "/Robot/deleteById/{robotId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteRobot(@Parameter(in = ParameterIn.PATH, description = "ID робота", required=true, schema=@Schema()) @PathVariable("robotId") Long robotId, @Parameter(in = ParameterIn.HEADER, description = "" ,schema=@Schema()) @RequestHeader(value="robotId", required=false) String robotId);


    @Operation(summary = "Найти робота по ID", description = "Вернуть одного робота по ID", tags={ "Robot" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Robot.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Robot not found") })
    @RequestMapping(value = "/Robot/findById/{robotId}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<Robot> getRobotById(@Parameter(in = ParameterIn.PATH, description = "Идентификатор робота", required=true, schema=@Schema()) @PathVariable("robotId") Long robotId);


    @Operation(summary = "Обновить робота", description = "Обновить робота", tags={ "Robot" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Robot.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Robot not found"),
        
        @ApiResponse(responseCode = "405", description = "Validation exception") })
    @RequestMapping(value = "/Robot",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Robot> updateRobot(@Parameter(in = ParameterIn.DEFAULT, description = "Создание нового робота в БД", required=true, schema=@Schema()) @Valid @RequestBody Robot body);

}

